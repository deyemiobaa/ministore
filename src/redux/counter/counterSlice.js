// import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { request, gql } from 'graphql-request';
// import { fetchCount } from './counterAPI';

// const initialState = {
//   value: 0,
//   status: 'idle',
//   data: [],
// };
// const varia = 'name';
// const query = gql`
// {
//   categories {
//     name
//     products {
//       id
//       ${varia}
//     }
//   }
// }
// `;
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async () => {
//     // request('http://localhost:4000/', query).then((data) => data.categories)
//     // const response = await request('http://localhost:4000/', query);
//     const result = request('http://localhost:4000/', query).then((data) => data.categories);
//     return result;
//   },
// );

// export const counterSlice = createSlice({
//   name: 'counter',
//   initialState,
//   // The `reducers` field lets us define reducers and generate associated actions
//   reducers: {
//     increment: (state) => {
//       // Redux Toolkit allows us to write "mutating" logic in reducers. It
//       // doesn't actually mutate the state because it uses the Immer library,
//       // which detects changes to a "draft state" and produces a brand new
//       // immutable state based off those changes
//       state.value += 1;
//     },
//     decrement: (state) => {
//       state.value -= 1;
//     },
//     // Use the PayloadAction type to declare the contents of `action.payload`
//     incrementByAmount: (state, action) => {
//       state.value += action.payload;
//     },
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: {
//     [incrementAsync.fulfilled]: (state, action) => {
//       state.data = action.payload;
//       state.status = 'success';
//     },
//   },
// });

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

// export default counterSlice.reducer;
